CREATE TYPE Parent AS (
  id integer,
  name text,
  first_name text,
  parent_data_id integer,
  parent_data Parent_data
);

CREATE TYPE Parent_data AS (
  id integer,
  street text,
  city text
);

@DatabaseType
class Parent {
  @DatabaseField
  private Integer id;
  @DatabaseField
  private String name;
  @DatabaseField
  private String firstName;
  @DatabaseField
  private Integer parentDataId;
@DatabaseField
  private ParentData parentData;
  public Integer getid() {
      return id;
  }
  public void setid(Integer aInteger) {
      id = aInteger;
  }
  public String getname() {
      return name;
  }
  public void setname(String aString) {
      name = aString;
  }
  public String getfirstName() {
      return firstName;
  }
  public void setfirstName(String aString) {
      firstName = aString;
  }
  public Integer getparentDataId() {
      return parentDataId;
  }
  public void setparentDataId(Integer aInteger) {
      parentDataId = aInteger;
  }
  public ParentData getparentData() {
      return parentData;
  }
  public void setparentData(ParentData aParentData) {
      parentData = aParentData;
  }
}

@DatabaseType
class ParentData {
  @DatabaseField
  private Integer id;
  @DatabaseField
  private String street;
  @DatabaseField
  private String city;
  public Integer getid() {
      return id;
  }
  public void setid(Integer aInteger) {
      id = aInteger;
  }
  public String getstreet() {
      return street;
  }
  public void setstreet(String aString) {
      street = aString;
  }
  public String getcity() {
      return city;
  }
  public void setcity(String aString) {
      city = aString;
  }
}

CREATE OR REPLACE FUNCTION insertPublicParent(p_in parentType) RETURNS SETOF parentType AS
$$
DECLARE 
  RETURN QUERY INSERT INTO public.parent (
        p_name,
    p_first_name,
    p_parent_data_id
  )
  SELECT
        p_in.name,
    p_in.first_name,
    p_in.parent_data_id
  RETURNING
        p_id,
    p_name,
    p_first_name,
    p_parent_data_id
END;
$$ LANGUAGE 'plpgsql' SECURITY DEFINER;

CREATE OR REPLACE FUNCTION deletePublicParent(p_in parentType) RETURNS SETOF parentType AS
$$
DECLARE
BEGIN
  RETURN DELETE FROM public.parent
  WHERE
          p_id = p_in.id
  RETURNING
          p_id,
    p_name,
    p_first_name,
    p_parent_data_id
END;
$$ LANGUAGE 'plpgsql' SECURITY DEFINER;

CREATE OR REPLACE FUNCTION updatePublicParent(p_in parentType) RETURNS SETOF parentType AS
$$
DECLARE 
BEGIN
  RETURN QUERY UPDATE public.parent 
  SET
        p_name = COALESCE ( p_in.name, p_name ),
    p_first_name = COALESCE ( p_in.first_name, p_first_name ),
    p_parent_data_id = COALESCE ( p_in.parent_data_id, p_parent_data_id )
  WHERE
        p_id = p_in.id
  RETURNING
        p_id,
    p_name,
    p_first_name,
    p_parent_data_id
END;
$$ LANGUAGE 'plpgsql' SECURITY DEFINER;

CREATE OR REPLACE FUNCTION selectPublicParent(p_in parentType) RETURNS SETOF parentType AS
$$
DECLARE 
BEGIN
  RETURN QUERY SELECT
        p_id,
    p_name,
    p_first_name,
    p_parent_data_id,
    CASE WHEN (p_parent_data_id) IS NOT NULL THEN 
      (SELECT pd_id,pd_street,pd_city
         FROM public.parent_data
        WHERE (p_parent_data_id) = (pd_id)) ELSE NULL END
  WHERE
        p_id = p_in.id
  ;
END;
$$ LANGUAGE 'plpgsql' SECURITY DEFINER;

None
import de.zalando.sprocwrapper.SProcCall;
import de.zalando.sprocwrapper.SProcParam;
import de.zalando.sprocwrapper.SProcService;

@SProcService
public interface ParentService {
  public Parent insertParent( Parent aParent );
  public Parent deleteParent( Parent aParent );
  public Parent updateParent( Parent aParent );
  public Parent selectPkParent( Parent aParent );

}
import org.springframework.stereotype.Repository;
import de.zalando.sprocwrapper.AbstractSProcService;

@Repository
public class ParentServiceImpl
    extends AbstractSProcService<ParentService, BitMapDatasourceProvider>
    implements ParentService {

    @Autowired
    public ParentServiceImpl( final BitMapDatasourceProvider p ) {
        super(p, ParentService.class);
    }

    public Parent insertParent( Parent aParent ) {
        return sproc.insertParent( aParent);
    }

    public Parent deleteParent( Parent aParent ) {
        return sproc.deleteParent( aParent);
    }

    public Parent updateParent( Parent aParent ) {
        return sproc.updateParent( aParent);
    }

    public Parent selectPkParent( Parent aParent ) {
        return sproc.selectPkParent( aParent);
    }

   
}
